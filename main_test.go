package staircase

import (
	"testing"

	"github.com/ready-steady/assert"
)

func TestEvaluate(t *testing.T) {
	lengths := []float64{0.2, 0.3, 0.5}
	heights := []float64{1, -2, 3}
	transition := 0.2
	steepness := 10.0

	staircase, _ := New(lengths, heights, transition, steepness)

	x := []float64{
		0.00, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11,
		0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23,
		0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35,
		0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47,
		0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59,
		0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71,
		0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82, 0.83,
		0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92, 0.93, 0.94, 0.95,
		0.96, 0.97, 0.98, 0.99, 1.00,
	}

	y := []float64{
		+1.0000000000000000e+00, +1.0000000000000000e+00, +1.0000000000000000e+00,
		+1.0000000000000000e+00, +1.0000000000000000e+00, +1.0000000000000000e+00,
		+1.0000000000000000e+00, +1.0000000000000000e+00, +1.0000000000000000e+00,
		+1.0000000000000000e+00, +1.0000000000000000e+00, +1.0000000000000000e+00,
		+1.0000000000000000e+00, +1.0000000000000000e+00, +1.0000000000000000e+00,
		+1.0000000000000000e+00, +1.0000000000000000e+00, +9.9258213053009559e-01,
		+9.4604137011372580e-01, +6.4239123393364916e-01, -4.9999999999999661e-01,
		-1.6423912339336464e+00, -1.9460413701137254e+00, -1.9925821305300957e+00,
		-1.9989939496086007e+00, -1.9998638063938927e+00, -1.9999815674761932e+00,
		-2.0000000000000000e+00, -2.0000000000000000e+00, -2.0000000000000000e+00,
		-2.0000000000000000e+00, -2.0000000000000000e+00, -2.0000000000000000e+00,
		-2.0000000000000000e+00, -2.0000000000000000e+00, -2.0000000000000000e+00,
		-2.0000000000000000e+00, -2.0000000000000000e+00, -2.0000000000000000e+00,
		-2.0000000000000000e+00, -2.0000000000000000e+00, -2.0000000000000000e+00,
		-2.0000000000000000e+00, -2.0000000000000000e+00, -1.9972361068153819e+00,
		-1.9903663266833627e+00, -1.9665357453785755e+00, -1.8851131504498715e+00,
		-1.6207090998937828e+00, -8.8649930587345571e-01, +5.0000000000000122e-01,
		+1.8864993058734629e+00, +2.6207090998937854e+00, +2.8851131504498730e+00,
		+2.9665357453785761e+00, +2.9903663266833629e+00, +2.9972361068153819e+00,
		+2.9992078189044871e+00, +2.9997730106564879e+00, +2.9999349643576676e+00,
		+2.9999813668035786e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00, +3.0000000000000000e+00,
		+3.0000000000000000e+00, +3.0000000000000000e+00,
	}

	for i := range x {
		assert.EqualWithin(staircase.Evaluate(x[i]), y[i], 1e-14, t)
	}
}
